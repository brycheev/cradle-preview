AOS.init(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AOS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π

// –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
const contactsBtn = document.getElementById('contacts-btn');
const addressBtn = document.getElementById('address-btn');
const contactsModal = document.getElementById('contacts-modal');
const addressModal = document.getElementById('address-modal');
const closeContacts = document.getElementById('close-contacts');
const closeAddress = document.getElementById('close-address');

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
contactsBtn.onclick = function () {
  contactsModal.classList.add('open');
};

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–¥—Ä–µ—Å–æ–º
addressBtn.onclick = function () {
  addressModal.classList.add('open');
};

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
closeContacts.onclick = function () {
  contactsModal.classList.remove('open');
};

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–¥—Ä–µ—Å–æ–º
closeAddress.onclick = function () {
  addressModal.classList.remove('open');
};

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞, –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –≤–Ω–µ –æ–∫–Ω–∞
window.onclick = function (event) {
  if (event.target === contactsModal) {
    contactsModal.classList.remove('open');
  } else if (event.target === addressModal) {
    addressModal.classList.remove('open');
  }
};

let currentIndex = 0;

const slides = document.querySelectorAll('.slide');
const totalSlides = slides.length;

function changeSlide(direction) {
    currentIndex += direction;

    if (currentIndex < 0) {
        currentIndex = totalSlides - 1; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–ª–∞–π–¥—É
    } else if (currentIndex >= totalSlides) {
        currentIndex = 0; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–µ—Ä–≤–æ–º—É —Å–ª–∞–π–¥—É
    }

    updateSliderPosition();
}

function updateSliderPosition() {
    const slider = document.querySelector('.slider');
    slider.style.transform = `translateX(-${currentIndex * 100}%)`;
}

document.addEventListener("DOMContentLoaded", () => {
    const languageToggle = document.getElementById("language-toggle");
    let currentLang = localStorage.getItem("lang") || "ru";

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    async function loadTranslations(lang) {
        try {
            const response = await fetch("translations.json");
            const translations = await response.json();
            updateText(translations[lang]);
        } catch (error) {
            console.error("Error loading translations:", error);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    function updateText(translations) {
        document.querySelectorAll("[data-i18n]").forEach((element) => {
            const key = element.getAttribute("data-i18n");
            if (translations[key]) {
                element.innerHTML = translations[key]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º innerHTML –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏
            }
        });

        languageToggle.textContent = currentLang === "ru" ? "üá∞üá¨ –ö—ã—Ä" : "üá∑üá∫ –†—É—Å";
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    languageToggle.addEventListener("click", () => {
        currentLang = currentLang === "ru" ? "kg" : "ru";
        localStorage.setItem("lang", currentLang);
        loadTranslations(currentLang);
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadTranslations(currentLang);
});
